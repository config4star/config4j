#--------
# Set default values that can be overridden by command-line options.
#--------
username ?= ""; 
password ?= ""; 
messageSelector ?= "";
subscriptionName ?= "SampleSubscription";
brokerURL ?= "tcp://localhost:2506";
clientID ?= ""; # proprietary to SonicMQ

jmsAPI = "sonicmq";    # set this to "sonicmq" or "portable"

#-----------------------------------------------------------------------
# Common variables that are used by all the example scopes that are
# shown later in this file.
#-----------------------------------------------------------------------

_common_stuff {
	config4jmsClass = "org.config4jms." + jmsAPI + ".Config4JMS";
	_tmp = "com.sonicsw.jndi.mfcontext";
	jndiEnvironment = [
		# name                               value
		#--------------------------------------------------------------
		"java.naming.factory.initial",       _tmp + ".MFContextFactory",
		"java.naming.provider.url",          .brokerURL,
		"java.naming.security.principal",    .username,
		"java.naming.security.credentials",  .password,
		_tmp + ".domain",                    "Domain1",
		_tmp + ".idleTimeout",               "60000",
	];
	@remove _tmp;

	ConnectionFactory.factory1 {
		obtainMethod = "jndi#SampleConnectionFactory1";
		#obtainMethod = "create";
		@if (obtainMethod == "create") {
			create.brokerURL = .brokerURL; # proprietary to SonicMQ
		}
	}
	Connection.connection1 {
		createdBy = "factory1";
		create {
			@if (.username != "") { userName = .username; }
			@if (.password != "") { password = .password; }
		}
		@if (.clientID != "") { clientID = .clientID; }
		@if (jmsAPI == "sonicmq") {
			pingInterval = "30 seconds";
		}
	}
	Session.prodSession {
		createdBy = "connection1";
		create.transacted = "false";
		create.acknowledgeMode = "AUTO_ACKNOWLEDGE";
	}
	Session.consSession {
		createdBy = "connection1";
		create.transacted = "false";
		create.acknowledgeMode = "AUTO_ACKNOWLEDGE";
	}
	TextMessage.chatMessage {
		createdBy = "prodSession";
		#properties = [
		#	"foo", "string", "Hello",
		#	"bar", "string", "Goodbye",
		#];
	}
}


#-----------------------------------------------------------------------
# "chat". Send and receive via the same topic.
# To play with this, open several command/shell windows, and use them
# to run the following commands:
#
#    runChat.sh -cfg example.cfg -scope chat -u Fred -p password
#    runChat.sh -cfg example.cfg -scope chat -u Mary -p password
#    runChat.sh -cfg example.cfg -scope chat -u John -p password
#
# When you send a message from one client, notice that it is received by
# all the clients.
#-----------------------------------------------------------------------

chat {
	@copyFrom "_common_stuff";

	Topic.chatTopic {
		obtainMethod = "jndi#SampleTopic1";
		#obtainMethod = "create";
		#createdBy = "prodSession";
		#create.topicName = "SampleTopic1";
	}
	MessageProducer.chatProducer {
		createdBy = "prodSession";
		create.destination = "chatTopic";
		deliveryMode = "PERSISTENT";
		timeToLive = "2 minutes";
	}
	MessageConsumer.chatConsumer {
		createdBy = "consSession";
		create {
			destination = "chatTopic";
			messageSelector = .messageSelector;
			noLocal = "false";
		}
	}
}


#-----------------------------------------------------------------------
# "chatNoEcho". This is almost identical to the "chat" scope, and you
# can run it the same way (just replace "-scope chat" with
# "-scope chatNoEcho").
#
# The only difference in this scope is that the "noLocal" flag is set
# for the MessageConsumer. This means a consumer does *not* receive
# messges sent from its own (local) connection. Thus, when you send a
# message from one client, the message will be received by the *other*
# clients, but not by the client that sent the message.
#
#    runChat.sh -cfg example.cfg -scope chatNoEcho -u Fred -p password
#    runChat.sh -cfg example.cfg -scope chatNoEcho -u Mary -p password
#    runChat.sh -cfg example.cfg -scope chatNoEcho -u John -p password
#-----------------------------------------------------------------------

chatNoEcho {
	@copyFrom "chat";
	MessageConsumer.chatConsumer.create.noLocal = "true";
}


#-----------------------------------------------------------------------
# "chatSubscriber". This is similarish to the "chat" scope, and you can
# run it the same way (replace "-scope chat" with "-scope chatSubscriber").
#
# The difference in this scope is that the MessageConsumer has been
# replaced with a TopicSubscriber (which, in the JMS class hierarchy,
# is a subtype of MessageConsumer). In terms of programming, the
# following line of code to create a MessageConsumer:
#
#    chatConsumer = consSession.createConsumer(parameters);
#
# has been replaced with the following line of code to create a
# TopicSubscriber:
#
#    chatConsumer = consSession.createDurableSubscriber(parameters);
#
# Note: the terminology is unfortunately inconsistent, which can
# cause confusion for people new to JMS. You need to remember that
# "topic subscriber" and "durable subscriber" mean the same thing.
#
# If a client uses a (normal) MessageConsumer, then the client
# receives only messages that are sent when it is connected. However,
# if a client uses a TopicSubscriber, then the JMS broker retains
# messages for the subscriber while the subscriber is disconnected.
#
#    runChat.sh -cfg example.cfg -scope chat -u Fred -p password
#    runChat.sh -cfg example.cfg -scope chat -u Mary -p password
#    runChat.sh -cfg example.cfg -scope chatSubscriber -u John -p password
#
# Start the three clients, and send some messages. Then kill the
# "Mary" and "John" clients. Send some more messages from "Fred".
# Now restart the "Mary" and "John" clients. Notice that "John" receives
# the messges that had been sent while he was disconnected (because he
# uses a TopicSubscriber), but "Mary" does not (because she uses a
# MessageConsumer).
#-----------------------------------------------------------------------

chatSubscriber {
	@copyFrom "chat";
	@remove MessageConsumer;
	TopicSubscriber.chatConsumer {
		#--------
		# The JMS specification states the JMS provider identifies the
		# subscriber by the combination of (1) username and
		# (2) subscription name. SonicMQ uses (1) and (2), and also
		# (3) the clientID, which is a proprietary enhancement to SonicMQ.
		#
		# (1) The username is specified as the "userName" parameter
		# when creating the connection.
		#
		# (2) The subscription name is specified by the "name" parameter
		# when creating the TopicSubscriber.
		#
		# (3) The clientID can be set on the ConnectionFactory object.
		# It identifies an application instance.
		#
		# The existence of a subscription obliges the JMS provider to
		# retain messages for the subscriber while the subscriber
		# is disconnected. Obviously, if a subscriber is disconnected
		# for a long time, during which lots of messges are sent to the
		# topic, then the retained messages would eventually exhaust
		# resources in the JM provider. SonicMQ provides proprietary
		# overloadings of createDurableSubscriber() that take a
		# "timeToLive" parameter. If the subscriber remains disconnected
		# for more than "timeToLive" then the subscription is destroyed.
		#--------
		createdBy = "consSession";
		create {
			topic = "chatTopic";
			name = .subscriptionName;
			messageSelector = .messageSelector;
			noLocal = "false";
			#timeToLive = "2 hours"; # optional and proprietary to SonicMQ
		}
	}
}

#-----------------------------------------------------------------------
# The "talker.one" and "talker.two" scopes provide a chat-like
# application, except: (1) there can be only two people exchanging
# messages at a time; and (2) the messages are exchanges via two queues
# rather than one topic.
#
# To play with this, open two command/shell windows, and use them
# to run the following commands:
# 
#    runChat.sh -cfg example.cfg -scope talker.one -u Fred -p password
#    runChat.sh -cfg example.cfg -scope talker.two -u Mary -p password
#-----------------------------------------------------------------------

talker.one {
	@copyFrom "_common_stuff";

	Queue.sendDestination {
		obtainMethod = "create";
		createdBy = "prodSession";
		create.queueName = "SampleQ1";
	}
	Queue.receiveDestination {
		obtainMethod = "create";
		createdBy = "consSession";
		create.queueName = "SampleQ2";
	}
	MessageProducer.chatProducer {
		createdBy = "prodSession";
		create.destination = "sendDestination";
	}
	MessageConsumer.chatConsumer {
		createdBy = "consSession";
		create.destination = "receiveDestination";
		create.noLocal = "false";
	}
}

talker.two {
	@copyFrom "talker.one";
	Queue.sendDestination.create.queueName = "SampleQ2";
	Queue.receiveDestination.create.queueName = "SampleQ1";
}

@remove _common_stuff;

